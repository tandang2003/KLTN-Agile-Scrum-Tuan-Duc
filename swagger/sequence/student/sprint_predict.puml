@startuml
actor "Student" as SV
participant "View\n(/manager/project/:id)" as View
participant "Decision\nController" as Controller
participant "Decision\nService" as Service
participant "Python\nServer" as Python
participant "ProjectSprint\nRepository" as Repo
participant "MySQL" as MySQL

activate SV
SV -> View : Student accesses
activate View
View -> Controller: GET /decision/{projectId}\n/{sprintId}/predict
activate Controller
Controller -> Service: makePredict\n(sprintId, projectId)
activate Service
Service --> Service: checkPrePredict\n(projectId, sprintId

alt checkPrePredict not passed
  Service --> Controller: response
  Controller --> View: response
  View --> SV: notify
else
  Service --> Service: collect data\nsprint
  Service --> Service: collect data\nissues
  Service -> Python: POST \n/aggregate
  activate Python
  Python --> Python: predict
  Python --> Service: result \npredict
  deactivate Python
  Service -> Repo: save result
  activate Repo
  Repo -> MySQL: save
  activate MySQL
  MySQL -> Repo: project \nsprint \nmodel
  deactivate MySQL
  Repo --> Service: save success
  deactivate Repo
  Service --> Controller: success
  deactivate Service
  Controller --> View: success
  deactivate Controller
  View --> SV: show success
  deactivate View
  deactivate SV
end
@enduml