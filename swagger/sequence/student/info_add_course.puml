@startuml
autonumber
actor Student as SV

participant "View\n(/user/course)" as View
participant "Course\nController" as Controller
participant "Course\nService" as Service
participant "Course\nRepository" as CourseRepo
participant "UserCourse\nRelation\nRepository" as UCRRepo
participant "User\nService" as UService

SV -> View : Student accesses
activate SV
activate View
View --> SV : Display list of courses and grades
SV -> View : Click "Add Course"
View --> SV : Show add course form
SV -> View : Fill in course info and grade
View -> Controller: POST /course
activate Controller
Controller -> Service : addCourse\nForUser(coursePoints)
activate Service

Service -> UService: getCurrentUser
activate UService
UService --> Service: return user
deactivate UService

loop for each (courseName, point) in coursePoints
    Service -> CourseRepo : getCourse(courseName)
    activate CourseRepo
    CourseRepo --> Service : return Course
    deactivate CourseRepo
    Service -> CourseRepo : getDependentCourses(course)
    activate CourseRepo
    CourseRepo --> Service : List<Course>
    deactivate CourseRepo

    loop for each dependentCourse
        Service -> UCRRepo : existsById(userId, dependentCourseId)
        activate UCRRepo
        UCRRepo --> Service: return boolean
        deactivate UCRRepo
        alt not exists
            Service -> Service : throw MISSING_PREREQUISITE
        end
    end

    Service -> UCRRepo : save(userCourseRelation)
    activate UCRRepo
    UCRRepo --> Service : savedRelation
    deactivate UCRRepo
end

Service --> Controller : return courseModel
deactivate Service

Controller --> View : return success
deactivate Controller

View --> SV : notify "Course added successfully"
deactivate SV

@enduml
