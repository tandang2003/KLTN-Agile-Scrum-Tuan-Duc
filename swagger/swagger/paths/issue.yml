post:
  summary: create issue
  description: create issue by student
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            name:
              type: string
              description: issue name
            sprintId:
              type: string
              description: sprint id
            projectId:
              type: string
              description: project id
            workspaceId:
              type: string
              description: workspace id
            storyPoint:
              type: integer
              description: story point
              required: true
            status:
              allOf:
                - $ref: "#/components/schemas/Status"
              description: status
            priority:
              allOf:
                - $ref: "#/components/schemas/Priority"
              description: priority
            description:
              type: string
              description: description
            position:
              type: number
              description: "position of issue,
                this is calculate in front-end and sent to server,
                position = (prevPosition + nextPosition) / 2 = (2000 + 1000) /2"
            assignerId:
              type: string
              description: uniId of assigner
            reviewId:
              type: string
              description: uniId of reviewer
            start:
              type: string
              description: date time start
            end:
              type: string
              description: date time end
        example:
          name: "Design database"
          sprintId: "sprint-001"
          projectId: "project-001"
          workspaceId: "workspace-001"
          status: "Backlog"
          priority: "Major"
          description: "Lorem"
          position: 1200
          assignerId: "uni-002"
          reviewerId: "uni-001"
          start: ""
          end: ""

  responses:
    200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ResponseApi"
              - type: object
          example:
            code: 200
            message: "Create issue"
put:
  summary: update issue
  description: update issue by student
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            id:
              type: string
              description: issue id
              required: true
            name:
              type: string
              description: issue name
              required: true
            description:
              type: string
              description: issue description
              required: true
            status:
              $ref: "#/components/schemas/Status"
            storyPoint:
              type: integer
              description: story point assigned to issue
              required: true
            priority:
              type: string
              description: value allow in Critical, Major, Minor, Trivial, Blocked
              required: false
              default: Critical
            start:
              type: number
              description: date time start issue
              required: true
            end:
              type: number
              description: date time end issue
              required: true
  responses:
    200:
      description: Success
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: "#/components/schemas/ResponseApi"
              - type: object

          example:
            code: 200
            message: "Update Issue"
            data:
              id: "project-001"
              name: "project-001"
              description: "..."
              storyPoint: 10
              priority: Critical
patch:
  summary: change status issue (move card)
  requestBody:
    required: true
    content:
      application/json:
        schema:
          type: object
          properties:
            issueId:
              type: string
              description: issue id
              required: true
            status:
              $ref: "#/components/schemas/Status"
            position:
              type: number
              description: use to decide order in list issue same status, front-end wil calculate it
          example:
            issueId: "10"
            status: "Todo"
            position: 2000
  responses:
    200:
      description: Success
    400:
      description: Not found issue with id

components:
  schemas:
    TagObject:
      $ref: "../components/tag-object.yml"
    ResponseApi:
      $ref: "../components/response-api.yml"
    ValidationErrorApi:
      $ref: "../components/validation-error.yml"
    UnauthorizedErrorApi:
      $ref: "../components/unauthenticated-error-api.yml"
    Status:
      type: string
      description: status issue, it will be a column name that contain issue
      default: Backlog
      enum:
        - Backlog
        - Todo
        - In Process
        - Review
        - Done
    Priority:
      type: string
      description: priority of issue
      default: Critical
      enum:
        - Critical
        - Major
        - Minor
        - Trivial
        - Blocked
    ApiPaging:
      type: object
      description: contain value in paging
      properties:
        currentPage:
          type: number
        totalPages:
          type: number
        totalItems:
          type: number

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
