openapi: 3.0.1
info:
  title: My API
  description: |
    # Overview 

    API documentation for Spring Boot application
    ## Structure api response format

    ### Base Api

    When a request sent to server, it always return a response has body like:

    ```json
    {
      "code": 401,
      "message": "Login"
      "data": Object
    }
    ```
    - `error`: status code
    - `message`: description about api
    - `data`: data will return for client, data structure is general

    ### Validation Api
    When a request failed because some field in body is missing, empty or not valid,
    API will return a response with **status: 422 (Unprocessable entity)**

    ```json
    {
      "code": 422,
      "message": "Validation Error",
      "error": [
        {
          "field": "field target"
          "message": "message"
        },
       {
          "field": "field target"
          "message": "message"
        }
      ]
    }
    ```
    - `code`: status code
    - `message`: description about api
    - `error`: contain array present field and message error
    ## API 
    - [Issue API](./issues)
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /auth:
    post:
      summary: Authenticate user
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uniId:
                  type: string
                password:
                  type: string
            example:
              uniId: 21130320
              password: 123456Duc@.
      responses:
        200:
          description: Successful authentication
          headers:
            Set-Cookie:
              description: >
                Sets the `refresh-token` cookie with `HttpOnly` and `Max-Age` attributes.  
                Example: `refresh-token=abc.def.ghi; HttpOnly; Max-Age=432000 ; Path=/refresh`
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          access-token:
                            type: string
                            description: The JWT token for authentication
                          user:
                            type: object
                            properties:
                              id:
                                type: string
                                description: The user ID storing in the database
                              uniId:
                                type: string
                                description: The university ID student or teacher of the user
                              name:
                                type: string
                                description: The name of the user
                              email:
                                type: string
                                description: The email student or teacher of the user
                              role:
                                type: string
                                description: "the user role name, has 4 role: admin, teacher, team leader and student"
                    example:
                      code: 200
                      message: "Login"
                      data:
                        access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                        user:
                          id: "user-001"
                          uniId: "21130320"
                          name: "Le Anh Duc"
                          email: "21139329@st.hcmuaf.edu.vn"
                          role: "student"
        422:
          description: Email or password invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                default:
                  code: 422
                  message: "Email or password invalid"
  # -----------------------------------------------
  /auth/register:
    post:
      summary: Register student account
      description: Authenticates a user and returns a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uniId:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        200:
          description: Successful Registration
        409:
          description: Account with uniId exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                default:
                  code: 409
                  error: "EXISTED_DATA"
                  message: "Data already exists"
  #  ----------------------------------------------
  /user:
    get:
      summary: Get info user
      description: Get info user when after login, return info to view in user card
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                access-token:
                  type: string
                  description: bearer user access token
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            required: true
                            type: string
                            description: user id
                          name:
                            required: true
                            type: string
                            description: user id
                          uniId:
                            required: true
                            type: string
                            description: university id
                          className:
                            required: false
                            type: string
                            description: class room id
                          avatar:
                            required: false
                    example:
                      code: 200
                      message: "get info user"
                      data:
                        id: "0978-999-111"
                        name: "Le Anh Duc"
                        uniId: "21130320"
                        className: "DH21DTX"
                        avatar: "https://res.cloudinary.com/yourstyle/image/upload/c_scale/q_auto/f_auto/v1/product_img/4/Screenshot%202024-03-24%20170336.png"
  # -----------------------------------------------
  /user/check:
    post:
      summary: Checking user with uniId has existed in workspace id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                uniId:
                  type: string
                  description: university id
                workspaceId:
                  type: string
                  description: workspace id
      responses:
        200:
          description: user with uniId is not exist in workspace id
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
        404:
          description: user with uniId is exist in workspace id
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
  # -----------------------------------------------
  /user/workspace:
    get:
      summary: Get info user
      description: Get info user when after login, return info to view in user card and list workspace
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            required: true
                            type: string
                            description: user id
                          name:
                            required: true
                            type: string
                            description: user id
                          uniId:
                            required: true
                            type: string
                            description: university id
                          className:
                            required: false
                            type: string
                            description: class room id
                          avatar:
                            required: false
                          projects:
                            type: array
                            items:
                              type: string
                            description: list workspace id owner by user
                    example:
                      code: 200
                      message: "get info user"
                      data:
                        id: "0978-999-111"
                        name: "Le Anh Duc"
                        uniId: "21130320"
                        className: "DH21DTX"
                        avatar: "https://res.cloudinary.com/yourstyle/image/upload/c_scale/q_auto/f_auto/v1/product_img/4/Screenshot%202024-03-24%20170336.png"
  # -----------------------------------------------
  /workspace:
    post:
      summary: Create a workspace
      description: |
        Used by: Teacher

        Identify:
        - Name
        - Description
        - Quantity of sprint
        - Range time of each sprint
        - Time start workspace
        - Time end workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: workspace name, must not empty
                description:
                  type: string
                  description: workspace description, must not empty
                sprintNum:
                  type: integer
                  description: quantity of sprints
                  minimum: 1
                timePerSprint:
                  type: number
                  description: time for 1 sprint unit is day
                  maximum: 1
                start:
                  type: string
                  description: time start workspace, must end start
                  format: yyyy-MM-dd'T'HH:mm:ss.SSSX
                end:
                  type: string
                  description: time estimate end workspace, must after start
                  format: yyyy-MM-dd'T'HH:mm:ss.SSSX
              example:
                name: "workspace-LTW"
                description: "Workspace for student in lab LTW NLU"
                sprintNum: 10
                timePerSprint: 1
                start: "1/1/2025"
                end: "15/3/2025"
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            type: string
                            description: workspace id
                          sprintNum:
                            type: integer
                            description: quantity of sprints
                          timePerSprint:
                            type: number
                            description: time for 1 sprint, unit is week
                          start:
                            type: number
                            description: time start workspace
                          end:
                            type: number
                            description: time estimate end workspace
                    example:
                      code: 201
                      message: "Create workspace success"
                      data:
                        id: "workspace-001"
                        sprintNum: 10
                        timePerSprint: 1
                        start: "1/1/2025"
                        end: "15/3/2025"
  # -----------------------------------------------
  /workspace/{id}:
    get:
      summary: Get information workspace
      description: Get information workspace and list project id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: workspace id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            type: string
                            description: workspace id
                          name:
                            type: string
                            description: name workspace
                          owner:
                            type: string
                            description: name owner
                          sprintNum:
                            type: number
                            description: quantity of sprint
                          timePerSprint:
                            type: number
                            description: time per sprint
                          start:
                            type: string
                            description: date time start workspace
                          end:
                            type: string
                            description: date time end workspace
                          createAt:
                            type: string
                            description: date time create workspace
                    example:
                      code: 200
                      message: "Workspace and project info retrieved successfully"
                      data:
                        id: "workspace-1"
                        name: "LTW"

    put:
      summary: Update and setting workspace
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: workspace id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sprintNum:
                  type: integer
                description:
                  type: string
                end:
                  type: string
                  description: ISO

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            type: string
                            description: workspace id
                          name:
                            type: string
                            description: name workspace
                          sprintNum:
                            type: integer
                            description: quantity of sprints
                          timePerSprint:
                            type: number
                            description: time for 1 sprint, unit is week
                          start:
                            type: string
                            description: time start workspace, must end start
                            format: yyyy-MM-dd'T'HH:mm:ss.SSSX
                          end:
                            type: string
                            description: time estimate end workspace, must after start
                            format: yyyy-MM-dd'T'HH:mm:ss.SSSX

                    example:
                      code: 200
                      message: "Workspace and project info retrieved successfully"
                      data:
                        id: "workspace-1"
                        name: "LTW"
                        projects:
                          - id: "project-1"
                            name: "Project A"
                          - id: "project-2"
                            name: "Project B"
  /workspace/list:
    get:
      summary: Paging workspace
      description: |
        Used by: 
        - Teacher
        - Student id appended to workspace
        Sort by id
      parameters:
        - name: page
          required: false
          allowEmptyValue: true
          in: query
        - name: size
          required: false
          allowEmptyValue: true
          in: query
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/ApiPaging"
                          - type: object
                            properties:
                              items:
                                properties:
                                  id:
                                    type: string
                                    description: project id
                                  name:
                                    type: string
                                    description: student name
                                  role:
                                    type: string
                                    description: name role (student or leader)
                                  className:
                                    type: string
                                    description: student class
                                  project:
                                    type: object
                                    properties:
                                      name:
                                        type: string
                                        description: name owner
                    example:
                      code: 200
                      message: "Create project success"
                      data:
                        items:
                          - id: "project-001"
                            name: Sell clothes
                            owner:
                              name: Le Anh Duc
                          - id: "project-002"
                            name: Sell Estate
                            owner:
                              name: Dang Minh Tan
                        currentPage: 1
                        totalPages: 2
                        totalItems: 4
    post:
      summary: Add student to workspace
      description: |
        Used by: Teacher

        Force add student to workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: workspace id
                  required: true
                studentIds:
                  type: array
                  items:
                    type: string
                  description: array contains student id
                  required: true
            example:
              id: "workspace-001"
              studentIds:
                - "student-001"
                - "student-002"
                - "student-003"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
              example:
                code: 200
                message: "Invite student to workspace"
        409:
          description: "At least 1 student is exist in workspace"
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: string
                        description: array contains student id exist in workspace
                    example:
                      code: 409
                      message: "Invite student to workspace"
                      data:
                        - "student-003"
  # -----------------------------------------------
  /workspace/{workspace_id}/student:
    get:
      summary: Paging student (both leader) inside workspace
      description: |
        Used by: 
        - Teacher, that is owner of this workspace
        Sort by id
      parameters:
        - name: workspace_id
          description: workspace_id
          in: path
          required: true
        - name: page
          required: false
          allowEmptyValue: true
          in: query
        - name: size
          required: false
          allowEmptyValue: true
          in: query
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/ApiPaging"
                          - type: object
                            properties:
                              items:
                                properties:
                                  id:
                                    type: string
                                    description: student id
                                  name:
                                    type: string
                                    description: student name
                                  role:
                                    type: string
                                    description: name role (student or leader)
                                  className:
                                    type: string
                                    description: student class
                                  project:
                                    type: object
                                    properties:
                                      id:
                                        type: string
                                        description: project id in workspace user joined
                                      name:
                                        type: string
                                        description: project id in workspace user join
                    example:
                      code: 200
                      message: "Create project success"
                      data:
                        items:
                          - id: "user-001"
                            name: Le Anh Duc
                            className: "DH21DTB"
                            role: "student"
                            project:
                              id: "project-001"
                              name: "Sell clothes"
                          - id: "user-002"
                            name: Dang Minh Tan
                            className: "DH21DTA"
                            role: "leader"
                            project:
                              id: "project-002"
                              name: "Sell estate"
                        currentPage: 1
                        totalPages: 2
                        totalItems: 4
  # -----------------------------------------------
  /workspace/{workspace_id}/project:
    get:
      summary: Paging project inside workspace
      description: |
        Used by: 
        - Teacher, that is owner of this workspace
        Sort by id
      parameters:
        - name: page
          required: false
          allowEmptyValue: true
          in: query
        - name: size
          required: false
          allowEmptyValue: true
          in: query
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: "#/components/schemas/ApiPaging"
                          - type: object
                            properties:
                              items:
                                properties:
                                  id:
                                    type: string
                                    description: project id
                                  name:
                                    type: string
                                    description: project name
                                  leader:
                                    type: string
                                    description: leader name
                    example:
                      code: 200
                      message: "Create project success"
                      data:
                        items:
                          - id: "project-001"
                            name: Sell clothes
                            leader: Le Anh Duc
                          - id: "project-002"
                            name: Sell Estate
                            leader: Dang Minh Tan
                        currentPage: 1
                        totalPages: 2
                        totalItems: 4
  # -----------------------------------------------
  /project/{id}:
    get:
      summary: Get information project
      description: |
        Used by: 
        - Teacher
        - Leader and student inside project

        Get information project and list of sprint
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: project id
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            type: string
                            description: project id
                          name:
                            type: string
                            description: name project
                          description:
                            type: string
                            description: description project
                          createAt:
                            type: string
                            description: timestamp create a project
                          updateAt:
                            type: string
                            description: timestamp update a project
                          tags:
                            type: array
                            items:
                              type: object
                              properties:
                                name:
                                  type: string
                                  description: name tag
                                color:
                                  type: string
                                  description: color tag
                                workspace:
                                  type: string
                                  description: workspace id
                          sprints:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  description: sprint id
                                process:
                                  type: object
                                  properties:
                                    planning:
                                      type: string
                                      description: date planning
                                    preview:
                                      type: string
                                      description: date preview
                                dtStart:
                                  type: string
                                  description: date time start sprint
                                dtEnd:
                                  type: string
                                  description: date time end sprint
                    example:
                      code: 200
                      message: "project info retrieved successfully"
                      data:
                        id: "project-001"
                        name: "Nhom 01"
                        description: ""
                        createAt: "2025-04-14T10:02:01+0000"
                        updateAt: "2025-04-14T10:02:01+0000"
                        tags:
                          - name: "UX/UI"
                            color: "red"
                          - name: "Java"
                            color: "pink"
                        sprints:
                          - id: "sprint-001"
                            process:
                              planning: "2025-04-14T10:02:01+0000"
                              preview: "2025-04-14T10:02:01+0000"
                            dtStart: "2025-04-14T10:02:01+0000"
                            dtEnd: "2025-04-14T10:02:01+0000"
                          - id: "sprint-002"
                            process:
                              planning: "2025-04-14T10:02:01+0000"
                              preview: "2025-04-14T10:02:01+0000"
                            dtStart: "2025-04-14T10:02:01+0000"
                            dtEnd: "2025-04-14T10:02:01+0000"
  # -----------------------------------------------
  /project:
    post:
      summary: Create a project
      description: |
        Used by: Student 

        Student that created project will become Leader (assign role)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: project name, must not empty
                description:
                  type: string
                  description: project description, must not empty
                teamMember:
                  type: array
                  items:
                    type: string
                  description: array contains student id
                  required: true
                workspace:
                  type: string
                  description: workspace id, must not empty
                  required: true
                tags:
                  type: array
                  items:
                    - $ref: "./components/tag-object.yml"
              example:
                name: "workspace-LTW"
                description: "Workspace for student in lab LTW NLU"
                teamMember: [21130171, 21130172, 21130173]
                workspace: 1
                tags:
                  [
                    { "name": backend, "color": "#c8dcff" },
                    { "name": backend, "color": "#c8dcff" },
                  ]
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            type: string
                            description: project id
                          name:
                            type: string
                            description: project name
                          tags:
                            type: object
                            $ref: "./components/tag-object.yml"
                            description: lis of tag project
                    example:
                      code: 201
                      message: "Create project success"
                      data:
                        id: "project-001"
                        name: 10
                        tags:
                          [
                            { "name": backend, "color": "#c8dcff" },
                            { "name": backend, "color": "#c8dcff" },
                          ]
  # -----------------------------------------------
  /project/invite:
    post:
      summary: Invite student to project
      description: |
        Used by:
        - Leader

        Constraints for inviting a user into a project:
        - The user must already be a member of the workspace that contains the project.
        - The user must not already be a member of any other project within the same workspace.
        - The current number of project members must be less than the maximum allowed number of members for the project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
        404:
          description: user id not found
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object

  /project/{project_id}/sprint:
    get:
      summary: Get information sprint
      description: Get information sprint by project id and sprint id
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: string
          description: ID of the project

        - name: sprint_id
          in: query
          required: true
          schema:
            type: string
          description: ID of the sprint
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/ResponseApi"
                  - type: object
                    properties:
                      data:
                        properties:
                          id:
                            type: string
                            description: sprint id
                          name:
                            type: string
                            description: name sprint
                          description:
                            type: string
                            description: description sprint
                          tags:
                            type: array
                            items:
                              type: string
                              description: id tag get from project
                          subTasks:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: string
                                  description: sub task id
                                name:
                                  type: string
                                  description: name sub task
                                check:
                                  type: boolean
                                  description: is finish or no ?
                    example:
                      code: 200
                      id: "sprint-001"
                      name: "Sprint-001"
                      description:
                      tag:
                        - "tag-UX/UI"
                        - "tag-Java"
                      subTasks:
                        - id: "sub-task-001"
                          name: "task 001"
                          check: true
                        - id: "sub-task-002"
                          name: "task 002"
                          check: false
  # -----------------------------------------------
  /sprint:
    post:
      summary: create sprint
      description: create sprint by teacher
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: string
                  description: project id
                title:
                  type: string
                  description: issue name
                storyPoint:
                  type: integer
                  description: minimum story point
                  required: true
                predict:
                  type: string
                  description: date time to run model predict
                  required: true
                start:
                  type: string
                  description: date time start
                end:
                  type: string
                  description: date time end
            example:
              projectId: "7b1635b7-8a2d-4054-a2ab-033d930ff799"
              title: "The furst sprint for project"
              predict: "2025-05-27T08:15:41.747Z"
              storyPoint: "12"
              start: "2025-05-24T08:15:41.747Z"
              end: "2025-05-30T08:15:41.747Z"
      responses:

    put:
      summary: update sprint
      description: create sprint by student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: string
                  description: project id
                dtPlanning:
                  type: string
                  description: date time start
                dtPreview:
                  type: string
                  description: date time end
            example:
              projectId: "7b1635b7-8a2d-4054-a2ab-033d930ff799"
              sprintId: "869970d9-9109-4cde-89b8-5c69013dff5c"
              dtPlanning: "2025-05-29T08:15:41.747Z"
              dtPreview: "2025-05-29T08:15:41.747Z"
      responses:

  /issue:
    $ref: "./paths/issue.yml"

components:
  schemas:
    TagObject:
      $ref: "./components/tag-object.yml"
    ResponseApi:
      $ref: "./components/response-api.yml"
    ValidationErrorApi:
      $ref: "./components/validation-error.yml"
    UnauthorizedErrorApi:
      $ref: "./components/unauthenticated-error-api.yml"
    Status:
      type: string
      description: status issue, it will be a column name that contain issue
      default: Backlog
      enum:
        - Backlog
        - Todo
        - In Process
        - Review
        - Done
    Priority:
      type: string
      description: priority of issue
      default: Critical
      enum:
        - Critical
        - Major
        - Minor
        - Trivial
        - Blocked
    ApiPaging:
      type: object
      description: contain value in paging
      properties:
        currentPage:
          type: number
        totalPages:
          type: number
        totalItems:
          type: number

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
